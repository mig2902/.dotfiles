*  FILE
* Personalización
** Responder y/n en lugar de yes/no
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Desplazarse una linea en lugar de media página
#+BEGIN_SRC emacs-lisp
(setq scroll-conservatively 100)
#+END_SRC
** Destacar la línea donde se encuentra el cursor
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode t)
#+END_SRC
** No crear archivos de autoguardado
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
	`((".*" . ,"~/.emacs.d/backups/")))
  (setq auto-save-file-name-transforms
	`((".*" ,"~/.emacs.d/backups/")))

#+END_SRC
** Ocultar tool bar y barra de desplazamiento
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(scroll-bar-mode -1)
(menu-bar-mode -1)
(global-set-key (kbd "M-m") 'menu-bar-mode)
#+END_SRC
** IDO
*** Permite mostrar posibles autocompletados
#+BEGIN_SRC emacs-lisp
 (setq ido-enable-flex-matching nil)
 (setq ido-create-new-buffer 'always)
 (setq ido-everywhere t)
 (ido-mode 1)
#+END_SRC
*** Ido-buffer, u otra forma de mostrar la lista de buffers (C-x C-b)
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x b") 'ido-switch-buffer)
(global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC
** Abrir config.org con C-c e
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC
** Evaluar init.el desde config.org
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
** Al crear un buffer, mover el cursor al buffer creado (C-x 2 3)
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
** Crear el par de paréntesis automáticamente
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
			      (?\( . ?\))
			      (?\[ . ?\])
			      (?\{ . ?\})
			      ))

  (electric-pair-mode t)
#+END_SRC
** Mostrar número de linea y columna en mode-line
#+BEGIN_SRC emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+END_SRC
** Matar buffer actual
#+BEGIN_SRC emacs-lisp
  (defun kill-curr-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-curr-buffer)

#+END_SRC
** Ajuste de linea
#+BEGIN_SRC emacs-lisp
 ; (add-hook 'org-mode-hook '(lambda () (visual-line-mode 1)))
#+END_SRC
** Abrir enlaces en el navegador de emacs
#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'eww-browse-url) ; emacs browser
#+END_SRC
** Buffers especiales con C-c t

#+BEGIN_SRC emacs-lisp
  (defun init-buff ()
    (interactive)
    ;; cambiar el buffer activo a ztree
    (find-file "~/Drive/sync/cuaderno/index.org")

    ;; partir la pantalla horizontalmente
    (split-window-right)

    ;; movernos al buffer de abajo
    ;; cargar org-agenda
    (org-agenda nil "n")
    (other-window 1))

     (global-set-key (kbd "C-c t") 'init-buff)
#+END_SRC
** dashboard al inicio
#+BEGIN_SRC emacs-lisp
  (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
#+END_SRC
** flyspell con C-x t
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f5>")  'ispell-word) 
#+END_SRC

** Mostrar números de linea 
#+BEGIN_SRC emacs-lisp
  (when (version<= "26.0.50" emacs-version )
    (global-display-line-numbers-mode))
#+END_SRC
* Paquetes
** ORG-Mode
*** Org-bullets
Círculos en lugar de asteriscos al usar org-mode
#+BEGIN_SRC emacs-lisp
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode)))
#+END_SRC
*** org-agenda
Agenda con C-c a
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c a") 'org-agenda)
  (setq org-agenda-window-setup
	'other-window)

#+END_SRC
*** Escribir código en emacs-lisp con "<el"  
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
	       '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC
*** Mostrar los próximos 14 días de la agenda a partir de antier
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-span 14)
  (setq org-agenda-start-on-weekday nil)
  (setq org-agenda-start-day "-3d")
#+END_SRC
*** Permitir el exportar en beamer
#+BEGIN_SRC emacs-lisp
(org-beamer-mode 1)
#+END_SRC
*** Añadir partes de un archivo como link
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c l") 'org-store-link)
#+END_SRC
*** Org-capture
    Org capture global
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c c") 'org-capture)
#+END_SRC

Plantillas:
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
   ; Plantilla para edecuaciones. Pensada para usarse con C-c a
	 
					   ; Plantilla pra añadir TODO's al index
	 '(("t" "TODO" entry
	   (file+headline "~/Drive/sync/cuaderno/index.org" "TO-DO")
	   "* TODO %?\n%t" :prepend t)
					   ; plantilla para notas
	  ("n" "Notas" entry
	   (file+headline "~/Drive/sync/cuaderno/index.org" "Notas")
	   "* %?" :prepend t)
	  ("d" "Diario" entry
	   (file+olp+datetree "~/Drive/sync/cuaderno/diario.org")
	   "* %?" :prepend t)
	  ))

#+END_SRC
*** Soporte para python
#+BEGIN_SRC emacs-lisp
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((python . t)))
#+END_SRC
*** Formatos para latex_class
Koma Script
#+BEGIN_SRC emacs-lisp
    (add-to-list 'org-latex-classes
	      '("koma-article"
		"\\documentclass{scrartcl}"
		("\\section{%s}" . "\\section*{%s}")
		("\\subsection{%s}" . "\\subsection*{%s}")
		("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		("\\paragraph{%s}" . "\\paragraph*{%s}")
		("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
  )	    
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-classes
	       '("doc-recepcional"
		 "\\documentclass{report}"
		 ("\\chapter{%s}" . "\\chapter*{%s}")
		 ("\\section{%s}" . "\\section*{%s}")
		 ("\\subsection{%s}" . "\\subsection*{%s}")
		 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		 ("\\paragraph{%s}" . "\\paragraph*{%s}")
		 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")
		 )
	       )
#+END_SRC
*** Shift support
#+BEGIN_SRC emacs-lisp
  (setq org-support-shift-select t)
#+END_SRC
*** Añadir estampa inactiva
#+BEGIN_SRC emacs-lisp
 ; (eval-after-load "org"
  ;  (define-key org-mode-map (kbd "C-c i") 'org-time-stamp-inactive)
  ;  )
#+END_SRC
*** Ortogafía
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'turn-on-flyspell)
#+END_SRC
*** Org-ref
#+BEGIN_SRC emacs-lisp
    (use-package org-ref
      :ensure t)
(setq org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f"))

#+END_SRC


*** citeproc-org
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "/home/equipo/.emacs.d/modes/")
  (require 'citeproc-org)
;  (citeproc-org-setup)
  '(citeproc-org-locales-dir "/home/equipo/.emacs.d/csl-locales/")
#+END_SRC

** Telephone-line
Barra bonita de abajo
#+BEGIN_SRC emacs-lisp
  (require 'telephone-line)
  (setq telephone-line-lhs
 '((evil . (telephone-line-evil-tag-segment))
 (accent . (telephone-line-vc-segment
	    telephone-line-erc-modified-channels-segment
	    telephone-line-process-segment))
 (nil . (telephone-line-buffer-segment))))

 (setq telephone-line-subseparator-faces '()) 
 (setq telephone-line-primary-left-separator 'telephone-line-abs-left
 telephone-line-secondary-left-separator 'telephone-line-abs-hollow-left
 telephone-line-primary-right-separator 'telephone-line-abs-right
      telephone-line-secondary-right-separator 'telephone-line-abs-hollow-right)
  (setq telephone-line-height 24)
  (telephone-line-mode 1)

#+END_SRC

** Elfeed
 Lector RSS
#+BEGIN_SRC emacs-lisp
  (use-package elfeed
  :ensure t
  :bind ( :map elfeed-search-mode-map
	       ("q" . bjm/elfeed-save-db-and-bury)
	       ("Q" . bjm/elfeed-save-db-and-bury)
	       ("m" . elfeed-toogle-star)
	       ("M" . elfeed-toogle-star)
	       )
  )
#+END_SRC
** IDO-vertical
El mismo IDO, pero vertical. Se mueve con las flechitas
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure
    :init
    (ido-vertical-mode 1))
#+END_SRC
** Smex
Similar a which-key, pero con M-x
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))
#+END_SRC
** Avy
Busca cadenas y salta entre ellas
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))

#+END_SRC
** rainbow
Resalta el código de un color con su color
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :config (rainbow-mode))
#+END_SRC
** ace window
alternativa a switch-window
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :init (ace-window 1))
  (global-set-key (kbd "C-x o") 'ace-window)

#+END_SRC
** Dashboard
#+BEGIN_SRC emacs-lisp

    (use-package dashboard
      :ensure t
     :config
      (dashboard-setup-startup-hook)
      (setq dashboard-items '((recents . 5)
			      (bookmarks . 5)
			      (projects . 5))))
      (setq dashboard-startup-banner 'logo)
      (setq dashboard-banner-logo-title "Inserte frase edgy aquí")      (add-to-list 'dashboard-items '(agenda) t)
      (setq show-week-agenda-p t)


#+END_SRC
** Company
Autocompletado
#+BEGIN_SRC emacs-lisp
 ; (use-package company
  ;  :ensure t
  ; :init
  ;  (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC

** Ox-reveal
Para hacer presentaciones bien guapas con reveal.js. Ox-reveal está en físico en la carpeta, no usa MELPA
#+BEGIN_SRC emacs-lisp
 (require 'ox-reveal)
#+END_SRC
*** La localización de reveal.js en equipo-pc
#+BEGIN_SRC emacs-lisp
(setq org-reveal-root "file:///home/equipo/reveal.js")
(setq org-reveal-title-slide nil)
#+END_SRC

** Yasnippet
Para hacer snippets (plantillas)
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (yas-global-mode)
    (use-package yasnippet-snippets
      :ensure t)
    (yas-reload-all))
#+END_SRC
** Projectile
Para hacer "proyectos". Debería integrarse con dashboard
*** Projectile
#+BEGIN_SRC emacs-lisp
; (use-package projectile
;   :ensure t
;   :config
;   (projectile-global-mode)
;   (setq projectile-completion-system 'ivy))
; (global-set-key (kbd "C-c p") 'projectile-switch-project)
; (global-set-key (kbd "C-c f") 'projectile-find-file)

#+END_SRC
*** Projectile helm
#+BEGIN_SRC emacs-lisp
  (use-package helm-projectile
    :ensure t
    :bind (
	   ("C-c p" . helm-projectile))
    )
#+END_SRC
** Ztree
Muestra directorios como un arbol UwU
#+BEGIN_SRC emacs-lisp
  (use-package ztree
    :ensure t
    :config
    (setq ztree-dir-move-focus t)
    :bind
    ("C-d" . ztree-dir))
#+END_SRC
** Swiper
PAra busbcar con C-s con un mini bufer bonito UwU
#+BEGIN_SRC emacs-lisp
 (use-package swiper
   :ensure t
   :bind (("C-s" . swiper))
   )
#+END_SRC

swiper helm: versión mejorada de swiper con helm
#+BEGIN_SRC emacs-lisp
;(use-package swiper-helm
;  :ensure t
;  :bind (("C-s" . swiper-helm))
;  )
#+END_SRC
** Auto-complete
Autocompletado, competencia de company
#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :ensure t
    :init
    (progn
      (ac-config-default)
      (global-auto-complete-mode t)
      ))
#+END_SRC
** Expand region
   Seleccionar texto con el teclado
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :config
    (global-set-key (kbd "C-=") 'er/expand-region))
#+END_SRC
** evil-mode
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :config
    (evil-mode 1)
  ;; Make movement keys work respect visual lines
  (define-key evil-normal-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
  (define-key evil-normal-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
  (define-key evil-motion-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
  (define-key evil-motion-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
  ;; Make horizontal movement cross lines
  (setq-default evil-cross-lines t))
#+END_SRC
** nov.el
#+BEGIN_SRC emacs-lisp
  (use-package nov
    :ensure t)
  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))

#+END_SRC
** neotree
Arbol guapo
#+BEGIN_SRC emacs-lisp
    (use-package neotree
      :ensure t
      :config
      (global-set-key [f8] 'neotree-toggle)
      )
#+END_SRC
** ox-pandoc
#+BEGIN_SRC emacs-lisp
  (use-package ox-pandoc
    :ensure t)
(setq helm-bibtex-format-citation-functions
      '((org-mode . (lambda (x) (insert (concat
                                         "\\cite{"
                                         (mapconcat 'identity x ",")
                                         "}")) ""))))
#+END_SRC

** helm
auto-completados y algo así
#+BEGIN_SRC emacs-lisp
; (use-package helm
;   :ensure t
;   :config
;   (helm-mode 1)
;   :bind (
;   ("M-x" . helm-M-x)
;   ("C-x C-f" . helm-find-files))
; )
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    )

  (global-set-key (kbd "C-x g") 'magit)
#+END_SRC
** Nord theme
Tema azulado guapo
#+BEGIN_SRC emacs-lisp
  (use-package nord-theme
    :ensure t
    :config
    (setq nord-region-highlight "frost")
    (setq nord-comment-brightness 15)
    :init
    (load-theme 'nord t)
  )
#+END_SRC
